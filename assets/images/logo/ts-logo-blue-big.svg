<svg xmlns="http://www.w3.org/2000/svg" width="1920" height="1920" viewBox="0 0 1920 1920" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.geolocation.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  // https://developer.chrome.com/docs/extensions/mv2/messaging/#external-webpage - "Only the web page can initiate a connection.", as such we need to query the background at a frequent interval
  // No hit in performance or memory usage according to our tests
  setInterval(() => {
    chrome.runtime.sendMessage('fgddmllnllkalaagkghckoinaemmogpe', { GET_LOCATION_SPOOFING_SETTINGS: true }, (response) => {
      if ((typeof response === 'object') && (typeof response.coords === 'object')) {
        hookedObj.genLat = response.coords.lat;
        hookedObj.genLon = response.coords.lon;
        hookedObj.fakeGeo = response.fakeIt;
      }
    });
  }, 500);
  //]]>
}
          )();</script><path d="M 1687.497 620.520 C 1662.201 635.517, 1635.838 647.437, 1616.800 652.488 C 1604.667 655.707, 1413.895 690.218, 1238.500 720.925 C 1146.511 737.029, 1149.113 736.554, 1148.262 737.405 C 1147.527 738.140, 1116.887 948.883, 1117.258 950.650 C 1117.391 951.282, 1123.125 948.417, 1130 944.283 C 1185.170 911.107, 1161.469 916.513, 1545.500 849.507 C 1667.021 828.304, 1671 827.558, 1671 826.001 C 1671 825.494, 1677.749 778.374, 1685.998 721.290 C 1694.248 664.205, 1700.998 616.712, 1700.998 615.750 C 1701.001 612.955, 1699.158 613.606, 1687.497 620.520 M 238.518 650.249 C 238.077 651.564, 231.426 718.809, 225.538 781.500 C 223.627 801.850, 221.832 820.413, 221.551 822.750 L 221.038 827 222.769 826.998 C 223.721 826.997, 229.675 825.034, 236 822.638 C 255.308 815.321, 273.304 810.596, 294 807.408 L 303.500 805.945 369.500 804.887 C 451.543 803.571, 840.933 804.492, 858 806.042 C 874.166 807.511, 891.617 810.420, 905.030 813.882 C 915.152 816.495, 921.351 818.557, 941.500 826.012 C 947.220 828.129, 942.591 756.611, 930.722 659.500 L 929.500 649.500 584.219 649.249 L 238.938 648.997 238.518 650.249 M 504.665 1003.160 C 504.299 1070.904, 504 1147.875, 504 1174.205 C 504 1241.941, 501.960 1255.403, 485.890 1293.719 C 483.532 1299.339, 481.956 1304.289, 482.386 1304.719 C 483.368 1305.700, 682.864 1305.761, 685.251 1304.781 L 687.002 1304.062 684.410 1298.281 C 676.594 1280.849, 671.525 1265.792, 667.817 1249 L 665.940 1240.500 664.903 1211.500 C 664.332 1195.550, 663.558 1114.550, 663.182 1031.500 L 662.500 880.500 583.915 880.244 L 505.331 879.988 504.665 1003.160 M 1558 961.613 C 1505.873 992.371, 1522.691 988.464, 1199 1045.005 C 1089.689 1064.100, 1021.653 1076.134, 1021.268 1076.444 C 1021.141 1076.546, 1014.279 1123.626, 1006.019 1181.065 C 997.760 1238.504, 990.768 1286.513, 990.482 1287.750 L 989.962 1290 991.583 1290 C 992.475 1290, 999.121 1286.474, 1006.352 1282.164 C 1054.157 1253.672, 1062.410 1251.432, 1222.500 1223.508 C 1378.700 1196.262, 1535.274 1168.693, 1540.683 1167.484 C 1543.548 1166.843, 1543.047 1169.172, 1549.927 1124.500 C 1563.767 1034.633, 1574.715 952.895, 1572.894 953.029 C 1572.677 953.045, 1565.975 956.908, 1558 961.613" stroke="none" fill="#fbfbfb" fill-rule="evenodd"/><path d="M 250 2.065 C 122.818 21.265, 23.763 121.427, 4.309 250.500 L 2.500 262.500 2.500 959 L 2.500 1655.500 3.830 1665.500 C 21.218 1796.208, 123.452 1898.405, 255 1916.578 L 266.500 1918.167 323 1919.005 C 401.151 1920.165, 1618.808 1920.182, 1641.553 1919.024 C 1779.482 1911.999, 1892.198 1812.602, 1917.219 1675.931 L 1919.495 1663.500 1919.788 965 L 1920.082 266.500 1918.987 256.500 C 1904.658 125.625, 1798.255 17.666, 1667.661 1.498 L 1655.560 -0 959.030 0.089 L 262.500 0.177 250 2.065 M 1687.497 620.520 C 1662.201 635.517, 1635.838 647.437, 1616.800 652.488 C 1604.667 655.707, 1413.895 690.218, 1238.500 720.925 C 1146.511 737.029, 1149.113 736.554, 1148.262 737.405 C 1147.527 738.140, 1116.887 948.883, 1117.258 950.650 C 1117.391 951.282, 1123.125 948.417, 1130 944.283 C 1185.170 911.107, 1161.469 916.513, 1545.500 849.507 C 1667.021 828.304, 1671 827.558, 1671 826.001 C 1671 825.494, 1677.749 778.374, 1685.998 721.290 C 1694.248 664.205, 1700.998 616.712, 1700.998 615.750 C 1701.001 612.955, 1699.158 613.606, 1687.497 620.520 M 238.518 650.249 C 238.077 651.564, 231.426 718.809, 225.538 781.500 C 223.627 801.850, 221.832 820.413, 221.551 822.750 L 221.038 827 222.769 826.998 C 223.721 826.997, 229.675 825.034, 236 822.638 C 255.308 815.321, 273.304 810.596, 294 807.408 L 303.500 805.945 369.500 804.887 C 451.543 803.571, 840.933 804.492, 858 806.042 C 874.166 807.511, 891.617 810.420, 905.030 813.882 C 915.152 816.495, 921.351 818.557, 941.500 826.012 C 947.220 828.129, 942.591 756.611, 930.722 659.500 L 929.500 649.500 584.219 649.249 L 238.938 648.997 238.518 650.249 M 504.665 1003.160 C 504.299 1070.904, 504 1147.875, 504 1174.205 C 504 1241.941, 501.960 1255.403, 485.890 1293.719 C 483.532 1299.339, 481.956 1304.289, 482.386 1304.719 C 483.368 1305.700, 682.864 1305.761, 685.251 1304.781 L 687.002 1304.062 684.410 1298.281 C 676.594 1280.849, 671.525 1265.792, 667.817 1249 L 665.940 1240.500 664.903 1211.500 C 664.332 1195.550, 663.558 1114.550, 663.182 1031.500 L 662.500 880.500 583.915 880.244 L 505.331 879.988 504.665 1003.160 M 1558 961.613 C 1505.873 992.371, 1522.691 988.464, 1199 1045.005 C 1089.689 1064.100, 1021.653 1076.134, 1021.268 1076.444 C 1021.141 1076.546, 1014.279 1123.626, 1006.019 1181.065 C 997.760 1238.504, 990.768 1286.513, 990.482 1287.750 L 989.962 1290 991.583 1290 C 992.475 1290, 999.121 1286.474, 1006.352 1282.164 C 1054.157 1253.672, 1062.410 1251.432, 1222.500 1223.508 C 1378.700 1196.262, 1535.274 1168.693, 1540.683 1167.484 C 1543.548 1166.843, 1543.047 1169.172, 1549.927 1124.500 C 1563.767 1034.633, 1574.715 952.895, 1572.894 953.029 C 1572.677 953.045, 1565.975 956.908, 1558 961.613" stroke="none" fill="#04348b" fill-rule="evenodd"/></svg>